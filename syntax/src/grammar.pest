// A program string. Like a block without surrounding curly braces or params.
program                     = { soi ~ statement_list ~ eoi }

block                       = { block_params? ~ "{" ~ statement_list ~ "}" }
block_params                = { "[" ~ symbol* ~ "]" }
statement_list              = { statement_separator* ~ (statement ~ (statement_separator+ ~ statement)*)? ~ statement_separator* }
statement_separator         = _{ line_terminator+ | ";" }
statement                   = _{ pipeline }

expr                        = { block
                            | "(" ~ pipeline ~ ")"
                            | interpolation
                            | substitution
                            | number_literal
                            | string_literal }

pipeline                    = !{ call ~ ("|" ~ call)* }
call                        = { expr+ }

interpolation               = ${ "\"" ~ interpolation_part* ~ "\"" }
interpolation_part          = ${ substitution | interpolation_literal_part }
interpolation_literal_part  = ${ (!"\"" ~ !"$" ~ any)+ }

substitution                = ${ format_substitution
                            | pipeline_substitution
                            | variable_substitution }
format_substitution         = ${ "${" ~ variable_path ~ (":" ~ format_substitution_flags)? ~ "}" }
format_substitution_flags   = ${ (alpha | digit | "_" | ".")+ }
pipeline_substitution       = ${ "$(" ~ pipeline ~ ")" }
variable_substitution       = ${ "$" ~ variable_path }

variable_path               = ${ variable_path_part ~ ("." ~ variable_path_part)* }
variable_path_part          = ${ symbol }

string_literal              = ${ symbol | "'" ~ single_quote_inner ~ "'" }
single_quote_inner          = ${ (!"'" ~ any)* }

number_literal              = ${ digit+ ~ ("." ~ digit+)? }

symbol                      = ${ !digit ~ (alpha | digit | "_")+ }
alpha                       = _{ 'a'..'z' | 'A'..'Z' }
digit                       = _{ '0'..'9' }

comment                     = _{ "#" ~ (!line_terminator ~ any)* }
whitespace                  = _{ horizontal_whitespace }
horizontal_whitespace       = _{ " " | "\t" }
line_terminator             = _{ "\r\n" | "\n" }
