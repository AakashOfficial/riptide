// The Riptide language grammar.
//
// This file is used both to generate the parser, and serves as the canonical
// specification for the language syntax.

// A program string. Like a block without surrounding curly braces or params.
// "SOI" and "EOI" refer to the start and end of the file, respectively.
program = { SOI ~ statement_list ~ EOI }

// Blocks are surrounded by curly braces, with an optional square bracket
// delimited parameter list proceeding it.
block = { block_params? ~ "{" ~ statement_list ~ "}" }
block_params = { "[" ~ symbol* ~ "]" }

// Statements are just pipelines separated by one or more separators. Extra
// separators are ignored.
statement_list = { statement_separator* ~ (statement ~ (statement_separator+ ~ statement)*)? ~ statement_separator* }
statement_separator = _{ NEWLINE | ";" }
statement = _{ pipeline }

// Expression is the main syntax building block.
expr = {
    block
    | "(" ~ pipeline ~ ")"
    | interpolation
    | substitution
    | number_literal
    | string_literal
}

// Pipelines are function calls chained together with the pipe "|" operator.
//
// The "!" prefix forces insignificant whitespace back on, which allows
// whitespace in a pipeline inside substitutions.
pipeline = !{ call ~ ("|" ~ call)* }

// A function call is a reference to a function followed by a series of argument
// expressions.
call = { named_call | unnamed_call }
named_call = { variable_path ~ expr* }
unnamed_call = { expr+ }

// An interpolated string is surrounded by double quotes, and is made up of a
// sequence of parts that, when stringified and concatenated in order, form the
// desired string value.
//
// Escapes are handled later in the parser pipeline.
interpolation = ${ "\"" ~ interpolation_part* ~ "\"" }
interpolation_part = ${ substitution | interpolation_literal_part }
interpolation_literal_part = ${ ("\\\"" | !"\"" ~ !"$" ~ ANY)+ }

// Dollar sign indicates the start of some form of substitution.
substitution = ${ &"$" ~ (
    format_substitution
    | pipeline_substitution
    | variable_substitution
) }
format_substitution = ${ "${" ~ variable_path ~ (":" ~ format_substitution_flags)? ~ "}" }
format_substitution_flags = ${ (ASCII_ALPHANUMERIC | "_" | ".")+ }
pipeline_substitution = ${ "$(" ~ pipeline ~ ")" }
variable_substitution = ${ "$" ~ variable_path }

// A variable path is a nested series of identifiers for accessing variables.
variable_path = ${ string_literal ~ ("->" ~ string_literal)* }

// A literal string. String literals are static and have no runtime
// interpolation.
// Escapes are handled later in the parser pipeline.
string_literal = ${ "'" ~ single_quote_inner ~ "'" | symbol }
single_quote_inner = ${ ("\\'" | !"'" ~ ANY)* }

// Numbers are floating point.
number_literal = ${ "." ~ ASCII_DIGIT+ | ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }

// A symbol is an unquoted string, usually used for identifying variable names.
symbol = ${ !ASCII_DIGIT ~ (!"->" ~ (ASCII_ALPHANUMERIC | "_" | "-" | "?" | "!" | "." | "/"))+ }

// Inline comments are similar to UNIX shells, where "#" starts a comment and
// includes all following characters until end of line.
COMMENT = _{ "#" ~ (!NEWLINE ~ ANY)* }

// Only horizontal whitespace is insignificant; vertical whitespace is used to
// separate staements in blocks.
WHITESPACE = _{ " " | "\t" | "\\" ~ NEWLINE }
